#-----------------------------------------------------------------------
#   Compiler and complile options                                       
#-----------------------------------------------------------------------
HOST = armagnac0
#HOST = knl

# [1] armagnac0 & jenever0
ifeq ($(HOST),armagnac0)
# Serial or OpenMP only
#FC=gfortran
#CXX=g++
# MPI 
FC=mpif90
CXX=mpic++

FDPS_FTN_MOD_DIR = ../../../src/fortran_interface/modules
FDPS_FTN_IF_GENERATOR = ../../../scripts/gen_ftn_if.py

MPI_LOC  = /usr/lib64/openmpi
MPI_INC  = -I$(MPI_LOC)/lib
MPI_LIB  = -L$(MPI_LOC)/lib -lmpi -lmpi_f77 -lmpi_f90

FDPS_LOC = ../../../
FDPS_INC = -I$(FDPS_LOC)/src -I$(FDPS_LOC)/src/particle_mesh
FDPS_LIB = -L$(FDPS_LOC)/src/particle_mesh -lpm

FFTW_LOC = /nfshome/namekata/gnu
FFTW_INC = -I$(FFTW_LOC)/include
FFTW_LIB = -L$(FFTW_LOC)/lib -lfftw3_mpi -lfftw3_omp -lfftw3 -lm

# [Option 1] w/o optimization
FCFLAGS = -std=f2003 -fall-intrinsics -O0 -Wall
CXXFLAGS = -Wall -Wextra -ftrapv -fexceptions -g3 $(FFTW_INC) $(FDPS_INC)
# [Option 2] w/ optimization 
#FCFLAGS = -std=f2003 -O3 -ffast-math -funroll-loops -finline-functions -DPARTICLE_SIMULATOR_USE_PM_MODULE
#CXXFLAGS = -O3 -ffast-math -funroll-loops -DPARTICLE_SIMULATOR_USE_PM_MODULE $(FFTW_INC) $(FDPS_INC) 
# --- Common part ---
FCFLAGS  += -DPARTICLE_SIMULATOR_USE_PM_MODULE
CXXFLAGS += -DPARTICLE_SIMULATOR_USE_PM_MODULE
# --- OpenMP flags ---
FCFLAGS  += -DPARTICLE_SIMULATOR_THREAD_PARALLEL -fopenmp
CXXFLAGS += -DPARTICLE_SIMULATOR_THREAD_PARALLEL -fopenmp
# --- MPI flags ---
FCFLAGS  += -DPARTICLE_SIMULATOR_MPI_PARALLEL
CXXFLAGS += -DPARTICLE_SIMULATOR_MPI_PARALLEL
LDFLAGS = -lgfortran $(MPI_LIB) $(FFTW_LIB) $(FDPS_LIB)
endif

# [3] knl
ifeq ($(HOST),knl)
# Serial or OpenMP only
#FC=/opt/intel/bin/ifort
#CXX=/opt/intel/bin/icpc
# MPI
FC=time -p mpiifort
CXX=time -p mpiicpc

FDPS_FTN_MOD_DIR = ../../../src/fortran_interface/modules
FDPS_FTN_IF_GENERATOR = ../../../scripts/gen_ftn_if.py

MPI_LOC  = /opt/intel/compilers_and_libraries/linux/mpi
MPI_BIN  = $(MPI_LOC)/bin64
MPI_INC  = -I$(MPI_LOC)/include64
MPI_LIB  = -L$(MPI_LOC)/lib64

FDPS_LOC = ../../../
FDPS_INC = -I$(FDPS_LOC)/src 
FDPS_LIB = 

# [Option 1] w/o optimization
#FCFLAGS = -fast -I/opt/intel/include
#CXXFLAGS = -fast -I/opt/intel/include $(FDPS_INC) 
# [Option 2] w/ debug
#FCFLAGS = -O0 -check all -fpe0 -gen_interfaces -ftrapuv -traceback -g
#CXXFLAGS = -ftrapuv -debug all -g -I/opt/intel/include $(FDPS_INC) 
# [Option 3] w/ optimization 
#FCFLAGS = -fast -ipo 
#CXXFLAGS = -fast -ipo $(FDPS_INC)
FCFLAGS = -O3 -ipo -xMIC-AVX512
CXXFLAGS = -O3 -ipo -xMIC-AVX512 $(FDPS_INC)
# --- Common part ---
FCFLAGS  += -fopenmp
CXXFLAGS += -DPARTICLE_SIMULATOR_THREAD_PARALLEL -fopenmp
CXXFLAGS += -DPARTICLE_SIMULATOR_MPI_PARALLEL
CXXFLAGS += -DPARTICLE_SIMULATOR_VECTOR_RANGE_CHECK
LDFLAGS = -L/opt/intel/lib/intel64 -L/usr/lib64 -lifport -lifcore -limf -lsvml -lm -lipgo -lirc -lirc_s $(MPI_LIB) $(FDPS_LIB)
endif

#-----------------------------------------------------------------------
#   Source files                                                        
#-----------------------------------------------------------------------
SRC_FTN = $(FDPS_FTN_MOD_DIR)/FDPS_vector.F90 \
	  $(FDPS_FTN_MOD_DIR)/FDPS_matrix.F90 \
	  $(FDPS_FTN_MOD_DIR)/FDPS_super_particle.F90 \
	  $(FDPS_FTN_MOD_DIR)/FDPS_time_profile.F90 \
	  user_defined.F90 \
	  FDPS_module.F90 \
	  f_main.F90
SRC_CXX = FDPS_ftn_if.cpp \
	  FDPS_Manipulators.cpp \
	  main.cpp
SRC_FDPS = FDPS_Manipulators.cpp \
	   FDPS_Manipulators.h \
	   FDPS_ftn_if.cpp \
	   FDPS_module.F90 \
	   user_defined.hpp \
	   main.cpp
SRC     = $(SRC_FTN) $(SRC_CXX)

OBJ_FTN = $(addsuffix .o, $(basename $(notdir $(SRC_FTN))))
OBJ_CXX = $(addsuffix .o, $(basename $(notdir $(SRC_CXX))))
OBJ     = $(OBJ_FTN) $(OBJ_CXX)

TARGET = p3m.out

$(TARGET): Makefile user_defined.F90 f_main.F90
	$(FDPS_FTN_IF_GENERATOR) ./user_defined.F90 --output ./
	make obj

obj: Makefile user_defined.F90 f_main.F90
	make obj_ftn
	make obj_cxx
	$(CXX) $(OBJ) $(CXXFLAGS) -o $(TARGET) $(LDFLAGS)
	strip $(TARGET)

obj_ftn: Makefile user_defined.F90 f_main.F90
	$(FC) $(FCFLAGS) -c $(SRC_FTN)

obj_cxx: $(SRC_CXX) Makefile
	$(CXX) $(CXXFLAGS) -c $(SRC_CXX)

clean:
	rm -f *.o *.s *.mod $(TARGET) *.dat

distclean:
	make clean
	rm -f $(SRC_FDPS)
	rm -rf results

